priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet f "Anonymous function"
function(${1}) {
	${VISUAL}$0
}
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "Function assigned to var"
${1:var }${2:function_name} = function $2(${3}) {
	${VISUAL}$0
};
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function(${1:window}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

# Snippets for Console Debug Output

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cclear "console.clear" b
console.clear();
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object});
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object});
endsnippet

snippet ce "console.error" b
console.error(${1:"${2:value}"});
endsnippet

snippet cgroup "console.group" b
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ci "console.info" b
console.info(${1:"${2:value}"});
endsnippet

snippet cl "console.log" b
console.log(${1:"${2:value}"});
endsnippet

snippet cd "console.debug" b
console.debug(${1:"${2:value}"});
endsnippet

snippet cprof "console.profile" b
console.profile("${1:label}");
${VISUAL}$0
console.profileEnd();
endsnippet

snippet ctable "console.table" b
console.table(${1:"${2:value}"});
endsnippet

snippet ctime "console.time" b
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp("${1:label}");
endsnippet

snippet ctrace "console.trace" b
console.trace();
endsnippet

snippet cw "console.warn" b
console.warn(${1:"${2:value}"});
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

# vim:ft=snippets:

###############
#  HTML STUFF #
###############
global !p
def x(snip):
	if snip.ft.startswith("x"):
		snip.rv = '/'
	else:
		snip.rv = ""
endglobal

############
# Doctypes #
############

#############
# Shortcuts #
#############
snippet down "Down (down)"
&#x2193;
endsnippet

snippet enter "Enter (enter)"
&#x2305;
endsnippet

snippet escape "Escape (escape)"
&#x238B;
endsnippet

snippet shift "Shift (shift)"
&#x21E7;
endsnippet

snippet tab "Tab (tab)"
&#x21E5;
endsnippet

snippet up "Up (up)"
&#x2191;
endsnippet

snippet return "Return (return)"
&#x21A9;
endsnippet

snippet right "Right (right)"
&#x2192;
endsnippet

snippet left "Left (left)"
&#x2190;
endsnippet

snippet option "Option (option)"
&#x2325;
endsnippet

#############
# HTML TAGS #
#############
snippet input "Input with Label" w
<label for="${2:${1/[[:alpha:]]+|( )/(?1:_:\L$0)/g}}">$1</label><input type="${3:text/submit/hidden/button}" name="${4:$2}" value="$5"${6: id="${7:$2}"}`!p x(snip)`>

endsnippet

snippet input "XHTML   <input>" w
<input type="${1:text/submit/hidden/button}" name="${2:some_name}" value="$3"${4: id="${5:$2}"}`!p x(snip)`>
endsnippet


snippet opt "Option" w
<option${1: value="${2:option}"}>${3:$2}</option>
endsnippet

snippet select "Select Box" w
<select name="${1:some_name}" id="${2:$1}"${3:${4: multiple}${5: onchange="${6:}"}${7: size="${8:1}"}}>
	<option${9: value="${10:option1}"}>${11:$10}</option>
	<option${12: value="${13:option2}"}>${14:$13}</option>${15:}
	$0
</select>
endsnippet


snippet textarea "XHTML   <textarea>" w
<textarea name="${1:Name}" rows="${2:8}" cols="${3:40}">$0</textarea>
endsnippet

snippet mailto "XHTML <a mailto: >" w
<a href="mailto:${1:joe@example.com}?subject=${2:feedback}">${3:email me}</a>
endsnippet

snippet body "<body>"
<body>
	$0
</body>
endsnippet

snippet small "<small>" w
<small>$0</small>
endsnippet

snippet span "<span>" w
<span>$0</span>
endsnippet

snippet span. "<span> with class" w
<span`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>$0</span>
endsnippet

snippet div "<div>" w
<div>
	$0
</div>
endsnippet

snippet div. "<div> with class" w
<div`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	$0
</div>
endsnippet

snippet div# "<div> with ID" w
<div`!p snip.rv=' id="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""``!p snip.rv=' className="' if t[2] else ""`${2:name}`!p snip.rv = '"' if t[2] else ""`>
	$0
</div>
endsnippet

snippet form "XHTML <form>" w
<form action="${1:`!p
snip.rv = (snip.basename or 'unnamed') + '_submit'
`}" method="${2:get}" accept-charset="utf-8">
	$0

	<p><input type="submit" value="Continue â†’"`!p x(snip)`></p>
</form>
endsnippet

snippet h1 "XHTML <h1>" w
<h1>$0</h1>
endsnippet

snippet h1. "<h1> with class" w
<h1`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	$0
</h1>
endsnippet

snippet h2 "XHTML <h2>" w
<h2>$0</h2>
endsnippet

snippet h2. "<h2> with class" w
<h2`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	$0
</h2>
endsnippet

snippet h3 "XHTML <h3>" w
<h3>$0</h3>
endsnippet

snippet h3. "<h3> with class" w
<h3`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	$0
</h3>
endsnippet

snippet h4 "XHTML <h4>" w
<h4>$0</h4>
endsnippet

snippet h4. "<h4> with class" w
<h4`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	$0
</h4>
endsnippet

snippet h5 "XHTML <h5>" w
<h5>$0</h5>
endsnippet

snippet h5. "<h5> with class" w
<h5`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	$0
</h5>
endsnippet

snippet h6 "XHTML <h6>" w
<h6>$0</h6>
endsnippet

snippet h6. "<h6> with class" w
<h6`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	$0
</h6>
endsnippet

snippet head "XHTML <head>"
<head>
	<meta charset="utf-8">
	<title>${1:`!p snip.rv = snip.basename or "Page Title"`}</title>
	$0
</head>
endsnippet

snippet link "XHTML <link>" w
<link rel="${1:stylesheet}" href="${2:/css/master.css}" type="text/css" media="${3:screen}" title="${4:no title}" charset="${5:utf-8}"`!p x(snip)`>
endsnippet

snippet meta "XHTML <meta>" w
<meta name="${1:name}" content="${2:content}"`!p x(snip)`>
endsnippet

snippet scriptsrc "XHTML <script src...>" w
<script src="$1" type="text/javascript" charset="${3:utf-8}"></script>
endsnippet

snippet script "XHTML <script>" w
<script type="text/javascript" charset="utf-8">
	$0
</script>
endsnippet

snippet style "XHTML <style>" w
<style type="text/css" media="screen">
	$0
</style>
endsnippet

snippet table "XHTML <table>" w
<table border="${1:0}"${2: cellspacing="${3:5}" cellpadding="${4:5}"}>
	<tr><th>${5:Header}</th></tr>
	<tr><td>${0:Data}</td></tr>
</table>
endsnippet

snippet a "Link" w
<a href="${1:http://www.${2:url.com}}"${3: target="_blank"}>${4:Anchor Text}</a>
endsnippet

snippet a. "Link with class" w
<a className="${1:name}" href="${2:http://www.${3:url.com}}"${4: target="_blank"}>${5:Anchor Text}</a>
endsnippet

snippet p "paragraph" w
<p>$0</p>
endsnippet

snippet p. "paragraph with class" w
<p className="${1:name}">$0</p>
endsnippet

snippet li "list item" w
<li>$0</li>
endsnippet

snippet li. "list item with class" w
<li className="${1:name}">$0</li>
endsnippet

snippet ul "unordered list" w
<ul>$0</ul>
endsnippet

snippet ul. "unordered list with class" w
<ul className="${1:name}">$0</ul>
endsnippet

snippet td "table cell" w
<td>$0</td>
endsnippet

snippet th "table header" w
<th>$0</th>
endsnippet

snippet tr "table row" w
<tr>$0</tr>
endsnippet

snippet title "XHTML <title>" w
<title>${1:`!p snip.rv = snip.basename or "Page Title"`}</title>
endsnippet

snippet fieldset "Fieldset" w
<fieldset id="${1/[\w\d]+|( )/(?1:_:\L$0\E)/g}" ${2:className="${3:}"}>
	<legend>$1</legend>
	$0
</fieldset>
endsnippet

snippet movie "Embed QT movie (movie)" b
<object width="$2" height="$3" classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="http://www.apple.com/qtactivex/qtplugin.cab">
	<param name="src" value="$1"`!p x(snip)`>
	<param name="controller" value="$4"`!p x(snip)`>
	<param name="autoplay" value="$5"`!p x(snip)`>
	<embed src="${1:movie.mov}"
		width="${2:320}" height="${3:240}"
		controller="${4:true}" autoplay="${5:true}"
		scale="tofit" cache="true"
		pluginspage="http://www.apple.com/quicktime/download/"
	`!p x(snip)`>
</object>
endsnippet
# vim:ft=snippets:
